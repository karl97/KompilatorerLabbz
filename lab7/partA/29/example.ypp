/* example.y */

%{

#define DEBUG_PRINTS 0


#if !DEBUG_PRINTS
#define DEBUG_CALL(x)
#else 
#define DEBUG_CALL(x) x
#endif

#include <stdio.h>
#include <stdlib.h>
#include "global.h"



#include "StackMachine.h"


StackMachine sm;
int labelCounter = 1;

extern int yyerror(char const *msg);


TreeNode* mkleaf(int type, int value);

TreeNode* mknode(int type, TreeNode* a0, TreeNode* a1, TreeNode* a2);

void printTree(TreeNode* tree);
int putTreeOnStackMachine(TreeNode* tree);
TreeNode* optimizeTree(TreeNode* tree);
extern int yylex();
int valuetable[1000];

int powe(int a1, int b1);

%}


%union {
  TreeNode* p;
  int i; 
}

%type <p> expr;
%type <p> assignment;
//%type <p> list;
%type <p> statement;
%type <p> statements;
//%type <p> morestatements;
//%type <p> blockstatement;
%type <p> optionalelse;
%type <i> ID;
%type <i> NUM;

%token DIV MOD DONE ID NUM EXPR WHILE PRINT READ IF ELSE
%left '?' ':'
%left '<' '>'
%left '+' '-'
%left '*' '/'
%left '^'
%left '&' '|' '%'


%%
start: statements DONE { printTree($1); TreeNode* opTree = optimizeTree($1); printTree(opTree); putTreeOnStackMachine(opTree); sm.append(Instruction(halt)); sm.list_program(); sm.run();}
        ;

statements: statement statements{$$ = mknode(';', $1, $2, 0);} 
	| {$$ = 0;}
	;

statement: 
	  assignment ';' {$$ = $1;}
	| expr  ';' {$$ = $1;}
	| WHILE '(' expr ')' statement {$$ = mknode(WHILE, $3, $5, 0);}
	| IF '(' expr ')' statement optionalelse {$$ = mknode(IF, $3, $5, $6);}
	| '{' statements '}' {$$ = $2;}
	;


assignment: ID '=' expr{$$ = mknode((int)'=', mkleaf(ID, $1), $3, 0); }
	;
optionalelse: ELSE statement {$$ = mknode(ELSE, $2, 0, 0);}
	| {$$ = 0;}
	;
expr :    expr '+' expr { $$ = mknode((int)'+', $1, $3, 0); }
	| expr '-' expr { $$ = mknode((int)'-', $1, $3, 0); }
	| expr '*' expr { $$ = mknode((int)'*', $1, $3, 0); }
	| expr '/' expr { $$ = mknode((int)'/', $1, $3, 0); }
	| expr '<' expr { $$ = mknode((int)'<', $1, $3, 0); }
	| expr '>' expr { $$ = mknode((int)'>', $1, $3, 0); }
	| expr '&' expr { $$ = mknode((int)'&', $1, $3, 0); }
	| expr '|' expr { $$ = mknode((int)'|', $1, $3, 0); }
	| expr '^' expr { $$ = mknode((int)'^', $1, $3, 0); }
	| expr '%' expr { $$ = mknode((int)'%', $1, $3, 0); }
	| expr '?' expr ':' expr { $$ = mknode((int)'?', $1, $3, $5); }
	| PRINT '(' ID ')' { $$ = mknode(PRINT, mkleaf(ID, $3), 0, 0); }
	| READ '(' ID ')' { $$ = mknode(READ, mkleaf(ID, $3), 0, 0); }
	| '(' expr ')' { $$ = mknode((int)'(', $2, mkleaf((int)')', ')'), 0); }
	| NUM { $$ = mkleaf(NUM, $1);}
	| ID  { $$ = mkleaf(ID, $1);}
	;




%%

int yyerror(char const *msg) {
	printf("Error: %s\n", msg);
	return 0;
}

void parse()
{
	yyparse();
}

int powe(int a1, int b1){
	int c=a1;
	for(int i=1;i<b1;i++){
		c=c*a1;
	}
	return c;
}

TreeNode* mkleaf(int type, int value) {
  	
	TreeNode* p = (TreeNode*)malloc(sizeof(TreeNode));
  	p->type = type;
  	p->value = value;
//print tree extra -----------------------------------------------------------------------------------------------------
	p->spacing = 2;
	if(type == ID)
		p->spacing += strlen(symtable[p->value].lexeme);
	if(type == NUM)
	{
		char buffer [12];
		sprintf (buffer, "%d", p->value);
		p->spacing += strlen(buffer) - 1;
	}
//print tree extra -----------------------------------------------------------------------------------------------------
  	return p;
}

TreeNode* mknode(int type, TreeNode* a0, TreeNode* a1, TreeNode* a2) {
	TreeNode* p = (TreeNode*)malloc(sizeof(TreeNode));
  	p->type = type;
  	p->args[0] = a0;
  	p->args[1] = a1;
  	p->args[2] = a2;
//print tree extra -----------------------------------------------------------------------------------------------------
	int numNodes = 0;
	
	for(int i = 0; i < 3; i++)
	{
		if(p->args[i] != 0)
		{
			numNodes++;
			if(p->spacing < p->args[i]->spacing)
			{
				p->spacing = p->args[i]->spacing;
			}
			if(p->depth < p->args[i]->depth)
			{
				p->depth = p->args[i]->depth;
			}
		}
	}
	p->depth = p->depth + 1;
	if(type == READ || type == ELSE)p->spacing += 4;
	else if(type == PRINT || type == WHILE){p->spacing += 6;}
	else if(type == IF){p->spacing += 2;}
	p->spacing = p->spacing *(numNodes + (numNodes - 1));
//print tree extra ---------------------------------------------------------------------------------------------------
  	return p;
}


//Print tree here -----------------------------------------------------------------------------------------------------
void printTreeReccursive(TreeNode* tree, int h, int globalSpacing, char* row)
{
	
	int index = globalSpacing;
	if(h <= 0)
	{
		if(tree == 0) return;
		switch(tree->type)
		{
		case NUM:
		{
			
			char buffer [12];
			sprintf (buffer, "%d", tree->value);
			for(int k = 0; k < 12; k++){
				if(buffer[k] == '\0')break;
				row[index + k] = buffer[k];
			}			
		}break;
		case ID:
		{
			char* temp = symtable[tree->value].lexeme;
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		case PRINT:
		{
			char* temp = "print";
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		case WHILE:
		{
			char* temp = "while";
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		case READ:
		{
			char* temp = "read";
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		case IF:
		{
			char* temp = "if";
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		case ELSE:
		{
			char* temp = "else";
			int size = strlen(temp);
			for(int k = 0; k < size; k++)
				row[index + k] = temp[k]; 
		}break;
		default:
		{
			row[index] = (char)tree->type; 
		}break;
		}		

		 	
	}else {
		if(tree != 0){
			int numNodes = 0;
			for(int i = 0; i < 3; i++)
			{
				if(tree->args[i] != 0)
				{
					numNodes++;
				}
			}
			if(numNodes == 3) {
				for(int i = 0; i < 3; i++)
				{
					printTreeReccursive(tree->args[i],  h - 1, globalSpacing + tree->spacing/4* (i - 1), row);
					
				}
			}else if(numNodes == 2)
			{	
				printTreeReccursive(tree->args[0],  h - 1, globalSpacing + tree->spacing/4* ( -1), row);
				printTreeReccursive(tree->args[1],  h - 1, globalSpacing + tree->spacing/4* ( +1), row);
			}else if(numNodes == 1)
			{					
				printTreeReccursive(tree->args[0],  h - 1, globalSpacing, row);
			}
		}
		
	}	
}


void printTree(TreeNode* tree)
{
	int globalSpacing = tree->spacing;
	char* row = (char*) malloc(sizeof(char)*globalSpacing + 1);
	row[globalSpacing] = '\0';
	for(int i = 0; i <= tree->depth; i++){
		for(int j = 0; j < globalSpacing; j++)
		{
			row[j] = ' ';
		}
		printTreeReccursive(tree, i, globalSpacing/2, row);	
		printf("%s\n", row);
	}
	free(row);
}
//Print tree here -----------------------------------------------------------------------------------------------------






int putTreeOnStackMachine(TreeNode* tree)
{
	
	if(tree == NULL) return 0;
	switch(tree->type)
		{
		case NUM:
		{	
			DEBUG_CALL(printf("NUM\n"));
			sm.append(Instruction(push,tree->value));
			return 1;
						
		}break;
		case ID:{

			DEBUG_CALL(printf("ID\n"));
			sm.append(Instruction(rvalue,tree->value));
			return 1;
		}break;
		case PRINT:
		{
			DEBUG_CALL(printf("PRINT\n"));
			
			putTreeOnStackMachine(tree->args[0]);
			sm.append(Instruction(stackop_write));
			return 1;
		}break;
		case WHILE:
		{
			DEBUG_CALL(printf("WHILE\n"));
			int label_1 = labelCounter++;
			int label_2 = labelCounter++;

			sm.append(Instruction(label, label_1));
			
			//villkor
			putTreeOnStackMachine(tree->args[0]);

			sm.append(Instruction(gofalse, label_2));

			//Kroppen
			putTreeOnStackMachine(tree->args[1]);

			sm.append(Instruction(jump, label_1));
			sm.append(Instruction(label, label_2));


			
		}break;
		case READ:
		{
			DEBUG_CALL(printf("READ\n"));
			sm.append(Instruction(lvalue, (tree->args[0])->value));
			sm.append(Instruction(stackop_read));
			sm.append(Instruction(assign));
			return 1;
		}break;
		case (int)'?':
		case IF:
		{
			DEBUG_CALL(printf("IF\n"));
			//Villkor
			putTreeOnStackMachine(tree->args[0]);
			int label_1 = labelCounter++;
			int label_2 = labelCounter++;
			
			//if
			sm.append(Instruction(gofalse, label_1));
			putTreeOnStackMachine(tree->args[1]);
			sm.append(Instruction(jump, label_2));

			//else
			sm.append(Instruction(label, label_1));
			putTreeOnStackMachine(tree->args[2]);
			sm.append(Instruction(label, label_2));

		}break;
		case ELSE:
		{
			DEBUG_CALL(printf("ELSE\n"));
			putTreeOnStackMachine(tree->args[0]);
		}break;
		case (int)'+':
		{
			DEBUG_CALL(printf("+\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(plus));
			return 1;
		}break;
		case (int)'-':
		{
			DEBUG_CALL(printf("-\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(minus));
			
			return 1;
		}break;
		case (int)'/':
		{
			DEBUG_CALL(printf("/\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(divide));
			
			return 1;
		}break;
		case (int)'*':
		{
			DEBUG_CALL(printf("*\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(times));
			
			return 1;		
		}break;
		case (int)'<':
		{
			DEBUG_CALL(printf("<\n"));
						putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(lt));
			
			return 1;
		}break;
		case (int)'>':
		{
			DEBUG_CALL(printf(">\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(gt));
			
			return 1;		
		}break;
		case (int)'&':
		{
			DEBUG_CALL(printf("&\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(stackop_and));
			
			return 1;
		}break;
		case (int)'|':
		{
			DEBUG_CALL(printf("|\n"));

			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(stackop_or));
			
			return 1;
		}break;
		case (int)'^':
		{
			DEBUG_CALL(printf("^\n"));
			
			int base_var = 0;
			int exponent_var = 1;	
			int loop_start = labelCounter++;
			int after_loop = labelCounter++;
			
			//Base
			sm.append(Instruction(lvalue, base_var)); //Store into base variable
			putTreeOnStackMachine(tree->args[0]);	//Push base value on stack			
			sm.append(Instruction(assign)); //Assign value to base variable
			
			//Exponent
			sm.append(Instruction(lvalue, exponent_var));//Store into exponent variable
			putTreeOnStackMachine(tree->args[1]);	//Push exponent value on stack		
			sm.append(Instruction(assign)); //Assign value to exponent variable

			//Start with result = 1, put result on stack
			sm.append(Instruction(push, 1));
 
			//While part
			sm.append(Instruction(label, loop_start));
						

			//If(Exponent > 0)
			sm.append(Instruction(rvalue, exponent_var));
			sm.append(Instruction(push, 0));
			sm.append(Instruction(gt));


			sm.append(Instruction(gofalse, after_loop));

			//Body
			
				//result = result * base;
				sm.append(Instruction(rvalue, base_var));
				sm.append(Instruction(times));

				//exponent = exponent  - 1;
				sm.append(Instruction(lvalue, exponent_var)); // put refrence to exponent on stack

				sm.append(Instruction(rvalue, exponent_var)); // put value from exponent on stack
				sm.append(Instruction(push, 1));
				sm.append(Instruction(minus));			
				sm.append(Instruction(assign)); //Store new value to exponent variable

				//Jump to loop start
				sm.append(Instruction(jump, loop_start));


			sm.append(Instruction(label, after_loop));


			//exp
			return 1;
		}break;
		case (int)'%':
		{
			DEBUG_CALL(printf("%%\n"));
			
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		
			sm.append(Instruction(modulo));
			
			return 1;
		}break;
		case (int)';':
		{
			DEBUG_CALL(printf(";\n"));
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);

		}break;
		case (int)'=':
		{
			DEBUG_CALL(printf("=\n"));
			sm.append(Instruction(lvalue, tree->args[0]->value));
			putTreeOnStackMachine(tree->args[1]);

			
			sm.append(Instruction(assign));
			return 1;
		}break;
		default:
		{
			
			putTreeOnStackMachine(tree->args[0]);
			putTreeOnStackMachine(tree->args[1]);
			putTreeOnStackMachine(tree->args[2]);
			DEBUG_CALL(printf("DEFAULT: %c\n", tree->type));

			return 1;
		}break;
	}		
	return 0;

}



//TreeNode* mkleaf(int type, int value)

//TreeNode* mknode(int type, TreeNode* a0, TreeNode* a1, TreeNode* a2)



TreeNode* optimizeTree(TreeNode* tree)
{
	TreeNode* optimizedTree = NULL;
	if(tree == NULL) return NULL;
	switch(tree->type)
		{
		case NUM:
		{	
			DEBUG_CALL(printf("NUM\n"));
			optimizedTree = mkleaf(tree->type, tree->value);						
		}break;
		case ID:{

			DEBUG_CALL(printf("ID\n"));
			optimizedTree = mkleaf(tree->type, tree->value);
		}break;
/*
		case PRINT:
		{
			DEBUG_CALL(printf("PRINT\n"));
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case WHILE:
		{
			DEBUG_CALL(printf("WHILE\n"));
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case READ:
		{
			DEBUG_CALL(printf("READ\n"));
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
*/
		case (int)'?':
		case IF:
		{
			DEBUG_CALL(printf("IF\n"));
			TreeNode* conditionArg = optimizeTree(tree->args[0]);
			TreeNode* trueArg = optimizeTree(tree->args[1]);
			TreeNode* elseArg = optimizeTree(tree->args[2]);
			if(conditionArg->type  == NUM)
			{
				//Replace node if constant condition
				if(conditionArg->value != 0)
				{
					optimizedTree = trueArg;
				}
				else
				{
					optimizedTree = elseArg;
				}				
 			}
			else
			{
				optimizedTree = mknode(tree->type, conditionArg, trueArg, elseArg); //otherwise
			}
		}break;
		case ELSE:
		{
			DEBUG_CALL(printf("ELSE\n"));
			
			optimizedTree = optimizeTree(tree->args[0]); //ELSE node-type is just flavor, don't need it in the tree
		}break;
		case (int)'+':
		{
			DEBUG_CALL(printf("+\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);

			if(leftArg->type  == ID && rightArg->type  == NUM && rightArg->value == 0)
			{
				optimizedTree = leftArg; //Remove node if: variable + 0, replace with left node
 			}
			else if(rightArg->type  == ID && leftArg->type  == NUM && leftArg->value == 0)
			{
				optimizedTree = rightArg; //Remove node if: 0 + variable, replace with right node
 			}
			else if(leftArg->type  == NUM && rightArg->type == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg->value + rightArg->value); //precompute node if: number + number
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}

			
				
		}break;
		case (int)'-':
		{
			DEBUG_CALL(printf("-\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);

			if(leftArg->type  == ID && rightArg->type  == NUM && rightArg->value == 0)
			{
				optimizedTree = leftArg; //Remove node if: variable - 0, replace with left node
 			}
			else if(leftArg->type  == NUM && rightArg->type == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg->value - rightArg->value); //precompute node if: number - number
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}
		}break;
		case (int)'/':
		{
			DEBUG_CALL(printf("/\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);
			if(leftArg->type  == NUM && leftArg->value == 0)
			{
				optimizedTree = mkleaf(NUM, 0); //Replace node with 0 if: 0 / something
 			}if(rightArg->type == NUM && rightArg->value == 1)
			{
				optimizedTree = leftArg; //Replace with left node if: something / 1
 			}
			else if(rightArg->type == NUM && leftArg->type == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg->value / rightArg->value); //Precompute if: num / num
 			}
			else if(rightArg->type == ID && leftArg->type == ID && leftArg->value == rightArg->value)
			{
				optimizedTree = mkleaf(NUM, 1); //Replace node with 1 if: ID / ID, when using the same variable.
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}
		}break;
		case (int)'*':
		{
			DEBUG_CALL(printf("*\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);
			if((leftArg->type  == NUM && leftArg->value == 0) || (rightArg->type  == NUM && rightArg->value == 0))
			{
				optimizedTree = mkleaf(NUM, 0); //Replace node with 0 if multipling with 0
 			}
			else if(leftArg->type  == NUM && leftArg->value == 1)
			{
				optimizedTree = rightArg; //Replace with right node if: 1 * something
 			}
			else if(rightArg->type  == NUM && rightArg->value == 1)
			{
				optimizedTree = leftArg; //Replace with left node if: something * 1
 			}
			else if(rightArg->type  == NUM && leftArg->type == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg->value * rightArg->value); //Precompute if: num * num
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}	
		}break;
		case (int)'<':
		{
			DEBUG_CALL(printf("<\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);
			if(leftArg->type  == NUM && rightArg->type  == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg<rightArg); //precompute if num<num
 			}
			else if(leftArg->type  == ID && rightArg->type  == ID && leftArg->value == rightArg->value)
			{
				optimizedTree = mkleaf(NUM, 0); //replace with 0 if ID<ID same variable
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}
		}break;
		case (int)'>':
		{
			DEBUG_CALL(printf(">\n"));
			TreeNode* leftArg = optimizeTree(tree->args[0]);
			TreeNode* rightArg = optimizeTree(tree->args[1]);
			if(leftArg->type  == NUM && rightArg->type  == NUM)
			{
				optimizedTree = mkleaf(NUM, leftArg>rightArg); //precompute if num>num
 			}
			else if(leftArg->type  == ID && rightArg->type  == ID && leftArg->value == rightArg->value)
			{
				optimizedTree = mkleaf(NUM, 0); //replace with 0 if ID>ID same variable
 			}
			else
			{
				optimizedTree = mknode(tree->type, leftArg, rightArg, optimizeTree(tree->args[2])); //otherwise
			}
		}break;
/* Optimize if we want:: 
		case (int)'&':
		{
			DEBUG_CALL(printf("&\n"));
			
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case (int)'|':
		{
			DEBUG_CALL(printf("|\n"));

			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case (int)'^':
		{
			DEBUG_CALL(printf("^\n"));
			
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case (int)'%':
		{
			DEBUG_CALL(printf("%%\n"));
			
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
*/
/*
		case (int)';':
		{
			DEBUG_CALL(printf(";\n"));
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
		case (int)'=':
		{
			DEBUG_CALL(printf("=\n"));
			
			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
*/
		default:
		{
			
			DEBUG_CALL(printf("DEFAULT: %c\n", tree->type));

			optimizedTree = mknode(tree->type, optimizeTree(tree->args[0]), optimizeTree(tree->args[1]), optimizeTree(tree->args[2]));
		}break;
	}		
	return optimizedTree;
}
